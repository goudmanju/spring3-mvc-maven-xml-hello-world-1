pipeline {
    agent any

    parameters {
        string(name: 'BRANCH', defaultValue: 'main', description: 'Git branch to build')
        booleanParam(defaultValue: false, name: 'mvn_build', description: 'Run Maven Build?')
        booleanParam(defaultValue: false, name: 'publish_to_nexus', description: 'Upload to Nexus?')
    }

    tools {
        maven "Maven_3.9.4" // must match your configured tool
    }

    environment {
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "13.218.210.63:8081/"
        NEXUS_REPOSITORY = "ncodeit-helloworld"
        NEXUS_CREDENTIAL_ID = "Nexus_server"
    }

    stages {
        stage("Clone Code") {
            steps {
                git branch: "${params.BRANCH}", url: 'https://github.com/sripriya7-ande/spring3-mvc-maven-xml-hello-world-1.git'
            }
        }

        stage("Maven Build") {
            when {
                expression { return params.mvn_build }
            }
            steps {
                sh 'mvn -Dmaven.test.failure.ignore=true clean package'
            }
        }

        stage("Publish to Nexus") {
            when {
                expression { return params.publish_to_nexus }
            }
            steps {
                script {
                    def pom = readMavenPom file: 'pom.xml'
                    def artifactPath = "target/${pom.artifactId}-${pom.version}.${pom.packaging}"
                    if (fileExists(artifactPath)) {
                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: pom.groupId,
                            version: "${BUILD_NUMBER}",
                            repository: NEXUS_REPOSITORY,
                            credentialsId: NEXUS_CREDENTIAL_ID,
                            artifacts: [
                                [artifactId: pom.artifactId, classifier: '', file: artifactPath, type: pom.packaging],
                                [artifactId: pom.artifactId, classifier: '', file: 'pom.xml', type: 'pom']
                            ]
                        )
                    } else {
                        error "Artifact not found: ${artifactPath}"
                    }
                }
            }
        }
    }
}
