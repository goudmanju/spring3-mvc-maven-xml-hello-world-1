pipeline {
    agent any

    parameters {
        string(name: 'BRANCH', defaultValue: 'master', description: 'Git branch to build') 
        booleanParam(name: 'mvn_build', defaultValue: true, description: 'Run Maven Build?')
        booleanParam(name: 'publish_to_nexus', defaultValue: true, description: 'Publish to Nexus?')
        booleanParam(name: 'run_sonar', defaultValue: true, description: 'Run SonarQube Analysis?')
    }

    tools {
        maven 'maven' // Make sure this matches your Jenkins Maven tool name
    }

    environment {
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "54.198.202.119:8081"
        NEXUS_REPOSITORY = "manju-snapshot" // Update if you're pushing to a different repo
        NEXUS_CREDENTIAL_ID = "nexus"
    }

    stages {

        stage("Clone Code") {
            steps {
                git branch: "${params.BRANCH}", url: 'https://github.com/goudmanju/spring3-mvc-maven-xml-hello-world-1.git'
            }
        }

        stage("Maven Build") {
            when {
                expression { return params.mvn_build }
            }
            steps {
                sh 'mvn -Dmaven.test.failure.ignore=true clean package'
            }
        }

        stage("SonarQube Analysis") {
            when {
                expression { return params.run_sonar }
            }
            steps {
                withSonarQubeEnv('sonar-server') { // Must match Jenkins Global Tool Configuration
                    sh 'mvn sonar:sonar'
                }
            }
        }

        stage("Publish to Nexus") {
            when {
                expression { return params.publish_to_nexus }
            }
            steps {
                script {
                    def pom = readMavenPom file: 'pom.xml'
                    def filesByGlob = findFiles(glob: "target/*.${pom.packaging}")
                    
                    if (filesByGlob.length > 0) {
                        def artifactPath = filesByGlob[0].path
                        echo "Found artifact: ${artifactPath}"

                        nexusArtifactUploader(
                            nexusVersion: env.NEXUS_VERSION,
                            protocol: env.NEXUS_PROTOCOL,
                            nexusUrl: env.NEXUS_URL,
                            groupId: pom.groupId,
                            version: "${BUILD_NUMBER}",
                            repository: env.NEXUS_REPOSITORY,
                            credentialsId: env.NEXUS_CREDENTIAL_ID,
                            artifacts: [
                                [artifactId: pom.artifactId, classifier: '', file: artifactPath, type: pom.packaging],
                                [artifactId: pom.artifactId, classifier: '', file: 'pom.xml', type: 'pom']
                            ]
                        )
                    } else {
                        error "Artifact not found in target directory!"
                    }
                }
            }
        }
    }
}
